using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using FMODUnity;
using Shared.Analytics;
using Shared.AssetBundle;
using Shared.Audio;
using Shared.BeatmapEditor;
using Shared.CollectionsMenu;
using Shared.MenuOptions;
using Shared.PlayerData;
using Shared.RhythmEngine;
using Shared.RiftInput;
using Shared.Rift_Localization;
using Shared.SceneLoading;
using Shared.SceneLoading.Payloads;
using Shared.Storyline;
using Shared.TrackSelection;
using TicToc.Localization;
using TMPro;
using UnityEngine;
using UnityEngine.AddressableAssets;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine.ResourceManagement.AsyncOperations;
using UnityEngine.UI;

namespace Shared.Title
{
	// Token: 0x02000158 RID: 344
	public class MainMenuManager : MonoBehaviour
	{
		// Token: 0x0600097A RID: 2426
		private void Awake()
		{
			this._input = InputAccessor.Instance.RiftInput;
			if (RiftBackgroundFX.Instance)
			{
				RiftBackgroundFX.Instance.SetConfig(this._riftFXConfig, this._beatMusicPlayer, false);
			}
			SceneLoadData.StageEntryType = RiftAnalyticsService.StageEntryType.StageSelectMenu;
			PlayerSaveController.Instance.SetSelectedArcadeDifficulty(Difficulty.Medium);
			if (SettingsAccessor.Instance)
			{
				this._settingsMenu = SettingsAccessor.Instance.RequestSettingsMenu(SceneLoadingController.Instance.CurrentSceneName, null);
			}
			foreach (MainMenuNavOption mainMenuNavOption in this._menuOptions)
			{
				mainMenuNavOption.OnSubmit += this.HandleMenuOptionSubmitted;
				if (mainMenuNavOption.ItemDefinition != null)
				{
					mainMenuNavOption.SetLockedStatus(PlayerDataUtil.GetLockedStatus(mainMenuNavOption.ItemDefinition.UnlockCriteria));
				}
				else
				{
					mainMenuNavOption.SetLockedStatus(true);
					Debug.LogError("Provided menu option " + mainMenuNavOption.name + " did not have an ItemDefinition defined. Option will be disabled");
				}
			}
			if (this._settingsMenu)
			{
				this._settingsMenu.gameObject.SetActive(false);
				this._settingsMenu.OnClose += this.HandleSettingsMenuClosed;
				this._settingsMenu.OnRequestMuteMusic += this.HandleMuteMusicRequested;
				this._settingsMenu.OnRequestUnmuteMusic += this.HandleUnmuteMusicRequested;
				if (this._settingsOption)
				{
					this._settingsOption.OnSubmit += this.HandleOpenSettingsMenu;
				}
			}
			if (this._extrasMenu)
			{
				this._extrasMenu.ToggleShowContent(false);
				this._extrasMenu.OnClose += this.HandleExtrasMenuClosed;
				if (this._extrasOption)
				{
					this._extrasOption.OnSubmit += this.HandleOpenExtrasMenu;
				}
			}
			if (this._quitOption)
			{
				this.SetQuitVisibility(true);
				this._quitOption.OnSubmit += this.HandleQuitGame;
			}
			if (this._discordOption)
			{
				this._discordOption.OnSubmit += this.HandleDiscordOpen;
			}
			if (this._newsletterOption)
			{
				this._newsletterOption.OnSubmit += this.HandleNewsletterOpen;
			}
			if (this._wishlistOption)
			{
				this._wishlistOption.OnSubmit += this.HandleWishlistOpen;
			}
			if (this._carouselOption)
			{
				this._carouselOption.OnSubmit += this.HandleSubmitCarousel;
			}
			if (this._carouselDisplay)
			{
				this._carouselDisplay.OnCarouselIndexUpdated += this.HandleCarouselChanged;
			}
			if (this._carouselCaptionText && this._carouselLocIds.Length != 0)
			{
				this._carouselCaptionText.text = Localizer.GetText(this._carouselLocIds[this._currentCarouselIndex], null);
			}
			if (this._titleScreenObject && MainMenuManager._isFirstLoad)
			{
				if (this._inputController)
				{
					this._inputController.IsInputDisabled = true;
				}
				if (this._backgroundParent)
				{
					this._backgroundParent.SetActive(false);
				}
				if (this._contentParent)
				{
					this._contentParent.SetActive(false);
				}
				this._titleScreenObject.SetActive(true);
			}
			this.SetNavBarVisibility(true);
		}

		// Token: 0x0600097B RID: 2427
		protected IEnumerator Start()
		{
			AudioManager.Instance.ResetGlobalBPM();
			if (this._collectionsMenuAssetRef.RuntimeKeyIsValid())
			{
				AsyncOperationHandle<GameObject> loadAsyncHandle = this._collectionsMenuAssetRef.LoadAssetAsync<GameObject>();
				yield return loadAsyncHandle;
				if (loadAsyncHandle.Status == AsyncOperationStatus.Succeeded)
				{
					GameObject gameObject = UnityEngine.Object.Instantiate<GameObject>(loadAsyncHandle.Result, this._mainCanvas.transform);
					this._collectionsMenu = gameObject.GetComponent<CollectionsMenuManager>();
					this._collectionsMenu.OnClose += this.HandleCollectionsMenuClosed;
				}
				else
				{
					Debug.LogError("Collections Menu loading operation failed!");
					this._collectionsMenuAssetRef.ReleaseAsset();
				}
				loadAsyncHandle = default(AsyncOperationHandle<GameObject>);
				loadAsyncHandle = default(AsyncOperationHandle<GameObject>);
			}
			foreach (MainMenuNavOption mainMenuNavOption in this._menuOptions)
			{
				yield return this.LoadScenePayloadAsset(mainMenuNavOption.ItemDefinition);
			}
			MainMenuNavOption[] array = null;
			ScenePayload scenePayload;
			if (SceneLoadData.TryGetCurrentPayload(out scenePayload) && scenePayload.ShouldOpenCollectionsMenu && this._collectionsMenu != null)
			{
				this._inputController.IsInputDisabled = true;
				ScenePayload scenePayload2 = new ScenePayload();
				scenePayload2.SetDestinationScene("MainMenu");
				this._collectionsMenu.Open(scenePayload2, true, scenePayload.GetCollectionCategory(), scenePayload.GetCollectionItemIndex(), false);
			}
			SceneLoadingController.Instance.FlagLoadingComplete(RiftAnalyticsTimeTracker.GameEnvironmentType.Menu);
			SceneLoadData.MarkScenePayloadAsComplete();
			yield return new WaitUntil(() => !SceneLoadingController.Instance.IsLoading);
			this._anyInputEventListener = InputSystem.onAnyButtonPress.Call(new Action<InputControl>(this.HandleAnyInputGiven));
			InputAccessor.Instance.EnterInputContext(InputAccessor.InputContext.UI, true);
			if (MainMenuManager._isFirstLoad)
			{
				yield return new WaitForSeconds(1f);
				this._beatMusicPlayer.Play(this.MainThemeEventRef, this.MainThemeBPM);
				if (this._titleScreenAnimator)
				{
					this._titleScreenAnimator.SetTrigger("PlayIntroFirstTime");
				}
			}
			else
			{
				this._beatMusicPlayer.Play(this.MenuThemeEventRef, this.MenuThemeBPM);
				if (this._titleScreenObject)
				{
					this._titleScreenObject.SetActive(false);
				}
				if (this._titleScreenAnimator)
				{
					this._titleScreenAnimator.SetTrigger("Default");
				}
			}
			MainMenuManager._isFirstLoad = false;
			yield break;
		}

		// Token: 0x0600097C RID: 2428
		private void OnDestroy()
		{
			IDisposable anyInputEventListener = this._anyInputEventListener;
			if (anyInputEventListener != null)
			{
				anyInputEventListener.Dispose();
			}
			foreach (KeyValuePair<string, SceneLoadData.LoadedPayloadAssetData> keyValuePair in this._scenePayloadAssetDataByAssetGuid)
			{
				keyValuePair.Value.AssetReference.ReleaseAsset();
			}
			this._scenePayloadAssetDataByAssetGuid.Clear();
			if (this._settingsMenu)
			{
				this._settingsMenu.OnClose -= this.HandleSettingsMenuClosed;
				this._settingsMenu.OnRequestMuteMusic -= this.HandleMuteMusicRequested;
				this._settingsMenu.OnRequestUnmuteMusic -= this.HandleUnmuteMusicRequested;
			}
		}

		// Token: 0x0600097D RID: 2429
		private IEnumerator LoadScenePayloadAsset(TitleNavItemDefinition navItemDefinition)
		{
			if (navItemDefinition == null)
			{
				yield break;
			}
			AssetReferenceT<ScenePayload> scenePayloadAssetRef = null;
			if (navItemDefinition.NavItemFunction == TitleNavItemDefinition.TitleNavItemFunctionEnum.GoToScene || navItemDefinition.NavItemFunction == TitleNavItemDefinition.TitleNavItemFunctionEnum.EnterStoryMode)
			{
				scenePayloadAssetRef = navItemDefinition.ScenePayloadAssetRefs[0];
			}
			else
			{
				if (navItemDefinition.NavItemFunction != TitleNavItemDefinition.TitleNavItemFunctionEnum.EnterStoryMode)
				{
					Debug.Log("Title Nav Def Item not valid type for loading scene!");
					yield break;
				}
				scenePayloadAssetRef = navItemDefinition.InitialStoryBeatNavItemDefinition.ScenePayloadAssetRefs[0];
			}
			if (!scenePayloadAssetRef.RuntimeKeyIsValid())
			{
				Debug.LogError("Scene payload asset reference is not valid!");
				yield break;
			}
			if (this._scenePayloadAssetDataByAssetGuid.ContainsKey(scenePayloadAssetRef.AssetGUID))
			{
				Debug.LogError("Scene payload asset data does not contain key!");
				yield break;
			}
			this._scenePayloadAssetDataByAssetGuid.Add(scenePayloadAssetRef.AssetGUID, new SceneLoadData.LoadedPayloadAssetData(null, scenePayloadAssetRef));
			AsyncOperationHandle<ScenePayload> loadAsyncHandle = scenePayloadAssetRef.LoadAssetAsync<ScenePayload>();
			yield return loadAsyncHandle;
			if (loadAsyncHandle.Status == AsyncOperationStatus.Succeeded)
			{
				ScenePayload result = loadAsyncHandle.Result;
				if (result != null)
				{
					this._scenePayloadAssetDataByAssetGuid[scenePayloadAssetRef.AssetGUID] = new SceneLoadData.LoadedPayloadAssetData(result, scenePayloadAssetRef);
				}
			}
			else
			{
				Debug.LogError("Scene payload loading operation failed!");
				this._scenePayloadAssetDataByAssetGuid.Remove(scenePayloadAssetRef.AssetGUID);
				scenePayloadAssetRef.ReleaseAsset();
			}
			yield break;
		}

		// Token: 0x0600097E RID: 2430
		private void Update()
		{
			if (this._isLoadingScene)
			{
				return;
			}
			if (this._shouldEnableInputNextFrame)
			{
				this._inputController.IsInputDisabled = false;
				this._shouldEnableInputNextFrame = false;
			}
			if (this._titleScreenObject && this._titleScreenObject.activeSelf)
			{
				if (this._wasAnyInputGivenThisFrame)
				{
					IDisposable anyInputEventListener = this._anyInputEventListener;
					if (anyInputEventListener != null)
					{
						anyInputEventListener.Dispose();
					}
					this._wasAnyInputGivenThisFrame = false;
					this._titleScreenObject.SetActive(false);
					if (this._backgroundParent)
					{
						this._backgroundParent.SetActive(true);
					}
					if (this._contentParent)
					{
						this._contentParent.SetActive(true);
					}
					AudioManager.Instance.PlayAudioEvent(this.EnterMenuSFXEventRef, 0f, false, 0U, 0f, false);
					this._beatMusicPlayer.Stop();
					this._beatMusicPlayer.Play(this.MenuThemeEventRef, this.MenuThemeBPM);
					if (this._playtestMessagesObject && !PlayerSaveController.Instance.CurrentSaveData.HasAgreedToNoStreaming)
					{
						this._playtestMessagesObject.SetActive(true);
						this._noStreamingDisclaimerMessageObject.SetActive(false);
						this._feedbackMessageObject.SetActive(true);
						return;
					}
					this._inputController.IsInputDisabled = false;
					return;
				}
			}
			else if (this._playtestMessagesObject && this._playtestMessagesObject.activeSelf)
			{
				if (this._noStreamingDisclaimerMessageObject && this._noStreamingDisclaimerMessageObject.activeSelf)
				{
					if (this._input.UI.Submit.WasPerformedThisFrame())
					{
						if (this._agreeTextBox.text.ToUpper().Equals("I AGREE"))
						{
							PlayerSaveController.Instance.SetHasAgreedToNoStreaming(true);
							this._noStreamingDisclaimerMessageObject.SetActive(false);
							this._feedbackMessageObject.SetActive(true);
							return;
						}
						this._tryAgainText.SetActive(true);
						if (this._wrongTextAnimation)
						{
							this._wrongTextAnimation.Play();
							return;
						}
					}
					else if (Input.GetKey(KeyCode.Backspace) || Input.GetKey(KeyCode.Delete))
					{
						if (Time.time - this._lastDeleteInputTime > this._minTimeBetweenDeleteInputs)
						{
							if (this._agreeTextBox.text.Length > 0)
							{
								this._agreeTextBox.text = this._agreeTextBox.text.Remove(this._agreeTextBox.text.Length - 1);
							}
							if (this._agreeTextBox.text.Length == 0 && this._enterIcon)
							{
								this._enterIcon.color = this._unsubmittableEnterIconColor;
							}
							this._tryAgainText.SetActive(false);
							this._lastDeleteInputTime = Time.time;
							return;
						}
					}
					else if (!string.IsNullOrEmpty(Input.inputString))
					{
						if (this._agreeTextBox.text.Length == 0 && this._enterIcon)
						{
							this._enterIcon.color = this._submittableEnterIconColor;
						}
						if (this._agreeTextBox.text.Length < this._maxAgreeTextLength)
						{
							string text = this._agreeTextBox.text + Input.inputString;
							this._agreeTextBox.text = ((text.Length < this._maxAgreeTextLength) ? text : text.Substring(0, this._maxAgreeTextLength));
						}
						this._tryAgainText.SetActive(false);
						this._lastDeleteInputTime = 0f;
						return;
					}
				}
				else if (this._feedbackMessageObject && this._feedbackMessageObject.activeSelf && this._input.UI.Submit.WasPerformedThisFrame())
				{
					if (!this._demoWelcomeDismissEventRef.IsNull)
					{
						AudioManager.Instance.PlayAudioEvent(this._demoWelcomeDismissEventRef, 0f, true, 0U, 0f, false);
					}
					PlayerSaveController.Instance.SetHasAgreedToNoStreaming(true);
					this._playtestMessagesObject.SetActive(false);
					this._shouldEnableInputNextFrame = true;
					return;
				}
			}
			else if (!this._inputController.IsInputDisabled && this._input.UI.Cancel.WasPerformedThisFrame())
			{
				this.HandleOpenSettingsMenu(null);
				if (!this.ConfirmSFXEventRef.IsNull)
				{
					AudioManager.Instance.PlayAudioEvent(this.ConfirmSFXEventRef, 0f, true, 0U, 0f, false);
				}
			}
		}

		// Token: 0x0600097F RID: 2431
		private void HandleAnyInputGiven(InputControl inputControl)
		{
			this._wasAnyInputGivenThisFrame = true;
		}

		// Token: 0x06000980 RID: 2432
		private void HandleOpenSettingsMenu(TitleNavItemDefinition itemDefinition)
		{
			StreamReader streamReader = new StreamReader(Application.persistentDataPath + "/CustomTracks/to_load.txt");
			CustomTrackMetadata customTrackMetadata = default(CustomTrackMetadata);
			customTrackMetadata.Version = 1f;
			customTrackMetadata.LevelId = streamReader.ReadLine();
			customTrackMetadata.TrackName = streamReader.ReadLine();
			customTrackMetadata.TrackSubtitle = "";
			customTrackMetadata.ArtistName = streamReader.ReadLine();
			customTrackMetadata.StageCreatorName = "Katie";
			customTrackMetadata.BeatsPerMinute = 242f;
			customTrackMetadata.TrackLength = "?";
			customTrackMetadata.BeatCount = 500;
			customTrackMetadata.AlbumArtFileName = "";
			customTrackMetadata.Counterpart = streamReader.ReadLine();
			CustomTrackDifficultyInformation customTrackDifficultyInformation = default(CustomTrackDifficultyInformation);
			customTrackDifficultyInformation.DifficultyLabel = "???";
			customTrackDifficultyInformation.Difficulty = Difficulty.Impossible;
			customTrackMetadata.AudioFileName = streamReader.ReadLine();
			customTrackDifficultyInformation.BeatmapFileName = streamReader.ReadLine();
			customTrackDifficultyInformation.Intensity = 999f;
			customTrackMetadata.DifficultyInformation = new CustomTrackDifficultyInformation[1];
			customTrackMetadata.DifficultyInformation[0] = customTrackDifficultyInformation;
			RRCustomTrackScenePayload rrcustomTrackScenePayload = new RRCustomTrackScenePayload();
			rrcustomTrackScenePayload.SetDestinationScene("RhythmRift");
			rrcustomTrackScenePayload.InitializeFromMetadata(customTrackMetadata, Difficulty.Impossible);
			rrcustomTrackScenePayload.IsPracticeMode = false;
			rrcustomTrackScenePayload.ShouldPracticeModeLoop = false;
			SceneLoadData.SetCurrentScenePayload(rrcustomTrackScenePayload);
			SceneLoadData.SetReturnScenePayload(this.CreateReturnScenePayload(customTrackMetadata.LevelId));
			SceneLoadData.StageEntryType = RiftAnalyticsService.StageEntryType.StageSelectMenu;
			SceneLoadingController.Instance.GoToScene("RhythmRift", null, true);
		}

		// Token: 0x06000981 RID: 2433
		private void HandleSettingsMenuClosed()
		{
			this.CheckLockedStatus();
			if (this._settingsMenu)
			{
				this._settingsMenu.gameObject.SetActive(false);
				if (SettingsAccessor.Instance)
				{
					SettingsAccessor.Instance.ReturnSettingsMenu(this._settingsMenu);
				}
				this._settingsOption.SetSubmitted(false);
				this._inputController.IsInputDisabled = false;
				this.SetNavBarVisibility(true);
			}
		}

		// Token: 0x06000982 RID: 2434
		private void HandleOpenExtrasMenu(TitleNavItemDefinition itemDefinition)
		{
			if (this._extrasMenu)
			{
				this._extrasMenu.ToggleShowContent(true);
				this._inputController.IsInputDisabled = true;
				this.SetNavBarVisibility(false);
			}
		}

		// Token: 0x06000983 RID: 2435
		private void HandleExtrasMenuClosed()
		{
			if (this._extrasMenu)
			{
				this._extrasMenu.ToggleShowContent(false);
				this._inputController.IsInputDisabled = false;
				this.SetNavBarVisibility(true);
			}
		}

		// Token: 0x06000984 RID: 2436
		private void HandleMuteMusicRequested()
		{
			if (this._beatMusicPlayer)
			{
				this._beatMusicPlayer.ChangeMusicVolume(0f, false);
			}
		}

		// Token: 0x06000985 RID: 2437
		private void HandleUnmuteMusicRequested()
		{
			if (this._beatMusicPlayer)
			{
				this._beatMusicPlayer.ChangeMusicVolume(1f, false);
			}
		}

		// Token: 0x06000986 RID: 2438
		private void HandleMenuOptionSubmitted(TitleNavItemDefinition itemDefinition)
		{
			if (itemDefinition == null)
			{
				return;
			}
			TitleNavItemDefinition.TitleNavItemFunctionEnum navItemFunction = itemDefinition.NavItemFunction;
			if (navItemFunction != TitleNavItemDefinition.TitleNavItemFunctionEnum.GoToScene)
			{
				if (navItemFunction != TitleNavItemDefinition.TitleNavItemFunctionEnum.PerformNavAction)
				{
					if (navItemFunction != TitleNavItemDefinition.TitleNavItemFunctionEnum.EnterStoryMode)
					{
						Debug.LogError("Encountered unexpected TitleNavItemFunctionEnum value " + string.Format("of {0}", itemDefinition.NavItemFunction), this);
						return;
					}
					bool flag = false;
					AssetReferenceT<ScenePayload>[] scenePayloadAssetRefs = itemDefinition.InitialStoryBeatNavItemDefinition.ScenePayloadAssetRefs;
					string text;
					if (LevelIdDatabase.Instance.TryGetLevelId(scenePayloadAssetRefs[scenePayloadAssetRefs.Length - 1].AssetGUID, out text) && !string.IsNullOrEmpty(text) && !PlayerDataUtil.HasLevelBeenCompleted(text, true))
					{
						flag = true;
						HashSet<string> hashSet = new HashSet<string>();
						foreach (AssetReferenceT<ScenePayload> assetReferenceT in scenePayloadAssetRefs)
						{
							if (this._scenePayloadAssetDataByAssetGuid.ContainsKey(assetReferenceT.AssetGUID))
							{
								SceneLoadData.SetCurrentScenePayload(this._scenePayloadAssetDataByAssetGuid[assetReferenceT.AssetGUID]);
								hashSet.Add(assetReferenceT.AssetGUID);
							}
						}
						StoryModeScenePayload storyModeScenePayload = ScriptableObject.CreateInstance<StoryModeScenePayload>();
						storyModeScenePayload.SetDestinationScene("StoryMode");
						storyModeScenePayload.Initialize(StorylineCharacters.Dove, string.Empty, true, Difficulty.Medium);
						SceneLoadData.SetReturnScenePayload(storyModeScenePayload);
						foreach (KeyValuePair<string, SceneLoadData.LoadedPayloadAssetData> keyValuePair in this._scenePayloadAssetDataByAssetGuid)
						{
							if (!hashSet.Contains(keyValuePair.Key))
							{
								keyValuePair.Value.AssetReference.ReleaseAsset();
							}
						}
						this._scenePayloadAssetDataByAssetGuid.Clear();
						ScenePayload scenePayload;
						if (SceneLoadData.TryGetCurrentPayload(out scenePayload))
						{
							SceneLoadingController.Instance.GoToScene(scenePayload.GetDestinationScene(), null, true);
						}
						else
						{
							SceneLoadingController.Instance.TryGoToReturnScene();
							SceneLoadingController.Instance.GoToScene("MainMenu", null, true);
						}
					}
					if (!flag)
					{
						this.GoToScene(itemDefinition);
						return;
					}
				}
				else
				{
					string navAction = itemDefinition.NavAction;
					if (navAction == "CollectionsMenu")
					{
						this._inputController.IsInputDisabled = true;
						ScenePayload scenePayload2 = new ScenePayload();
						scenePayload2.SetDestinationScene("MainMenu");
						this._collectionsMenu.Open(scenePayload2, false, CollectionCategory.Modifiers, 0, false);
						return;
					}
					if (!(navAction == "ExtrasMenu") && !(navAction == "SettingsMenu"))
					{
						Debug.LogError("Encountered unexpected TitleNavActions value " + string.Format("of {0}", itemDefinition.NavItemFunction), this);
						return;
					}
				}
				return;
			}
			this.GoToScene(itemDefinition);
		}

		// Token: 0x06000987 RID: 2439
		private void GoToScene(TitleNavItemDefinition itemDefinition)
		{
			if (itemDefinition == null)
			{
				return;
			}
			this._isLoadingScene = true;
			HashSet<string> hashSet = new HashSet<string>();
			AssetReferenceT<ScenePayload> assetReferenceT = itemDefinition.ScenePayloadAssetRefs[0];
			if (!this._scenePayloadAssetDataByAssetGuid.ContainsKey(assetReferenceT.AssetGUID))
			{
				Debug.LogError("Scene Payload Asset Data does not contain key!");
				return;
			}
			SceneLoadData.SetCurrentScenePayload(this._scenePayloadAssetDataByAssetGuid[assetReferenceT.AssetGUID]);
			hashSet.Add(assetReferenceT.AssetGUID);
			foreach (KeyValuePair<string, SceneLoadData.LoadedPayloadAssetData> keyValuePair in this._scenePayloadAssetDataByAssetGuid)
			{
				if (!hashSet.Contains(keyValuePair.Key))
				{
					keyValuePair.Value.AssetReference.ReleaseAsset();
				}
			}
			this._scenePayloadAssetDataByAssetGuid.Clear();
			ScenePayload scenePayload;
			if (SceneLoadData.TryGetCurrentPayload(out scenePayload))
			{
				SceneLoadingController.Instance.GoToScene(scenePayload.GetDestinationScene(), null, true);
			}
		}

		// Token: 0x06000988 RID: 2440
		public void SetNavBarVisibility(bool shouldBeVisible)
		{
			if (this._navBarObject)
			{
				this._navBarObject.SetActive(shouldBeVisible);
			}
		}

		// Token: 0x06000989 RID: 2441
		public void HandleQuitGame(TitleNavItemDefinition itemDefinition)
		{
			SceneLoadingController.Instance.GoToScene("EnterToWin", null, true);
		}

		// Token: 0x0600098A RID: 2442
		public void SetQuitVisibility(bool shouldBeVisible)
		{
			if (this._quitOption)
			{
				this._quitOption.gameObject.SetActive(shouldBeVisible);
			}
		}

		// Token: 0x0600098B RID: 2443
		public void HandleDiscordOpen()
		{
			Application.OpenURL("https://discord.com/invite/braceyourselfgames");
		}

		// Token: 0x0600098C RID: 2444
		public void HandleNewsletterOpen()
		{
			Application.OpenURL("https://braceyourselfgames.us5.list-manage.com/subscribe?u=f0efc4a67f39b1b55bbbcbe89&id=f2156cc53e&MERGE0=");
		}

		// Token: 0x0600098D RID: 2445
		public void HandleWishlistOpen()
		{
		}

		// Token: 0x0600098E RID: 2446
		public void HandleSubmitCarousel()
		{
			if (this._currentCarouselIndex >= 0 && this._currentCarouselIndex < this._carouselUrls.Length)
			{
				if (string.IsNullOrWhiteSpace(this._carouselUrls[this._currentCarouselIndex]))
				{
					return;
				}
				Application.OpenURL(this._carouselUrls[this._currentCarouselIndex]);
			}
		}

		// Token: 0x0600098F RID: 2447
		private void HandleCarouselChanged(int newIndex)
		{
			this._currentCarouselIndex = newIndex;
			if (this._carouselCaptionText == null)
			{
				return;
			}
			if (this._currentCarouselIndex < 0 || this._currentCarouselIndex >= this._carouselLocIds.Length)
			{
				return;
			}
			this._carouselCaptionText.text = Localizer.GetText(this._carouselLocIds[this._currentCarouselIndex], null);
		}

		// Token: 0x06000990 RID: 2448
		private void HandleCollectionsMenuClosed()
		{
			this._inputController.IsInputDisabled = false;
			if (this._collectionsMenuOption)
			{
				this._collectionsMenuOption.SetSubmitted(false);
			}
		}

		// Token: 0x06000991 RID: 2449
		private void CheckLockedStatus()
		{
			foreach (MainMenuNavOption mainMenuNavOption in this._menuOptions)
			{
				if (mainMenuNavOption.ItemDefinition != null)
				{
					mainMenuNavOption.SetLockedStatus(false);
				}
				else
				{
					mainMenuNavOption.SetLockedStatus(true);
					Debug.LogError("Provided menu option " + mainMenuNavOption.name + " did not have an ItemDefinition defined. Option will be disabled");
				}
			}
		}

		// Token: 0x06000994 RID: 2452
		private ScenePayload CreateReturnScenePayload(string levelId)
		{
			ScenePayload scenePayload = ScriptableObject.CreateInstance<ScenePayload>();
			scenePayload.SetDestinationScene("MainMenu");
			return scenePayload;
		}

		// Token: 0x0600206D RID: 8301
		public void load_custom(string folder_name)
		{
			CustomTrackMetadata customTrackMetadata = default(CustomTrackMetadata);
			customTrackMetadata.Version = 1f;
			customTrackMetadata.LevelId = folder_name;
			StreamReader streamReader = new StreamReader(Application.persistentDataPath + "/CustomTracks/" + folder_name + "/meta.txt");
			customTrackMetadata.TrackName = streamReader.ReadLine();
			customTrackMetadata.TrackSubtitle = "";
			customTrackMetadata.ArtistName = streamReader.ReadLine();
			customTrackMetadata.StageCreatorName = "Katie";
			customTrackMetadata.BeatsPerMinute = 242f;
			customTrackMetadata.TrackLength = "?";
			customTrackMetadata.BeatCount = 500;
			customTrackMetadata.AlbumArtFileName = "";
			customTrackMetadata.Counterpart = streamReader.ReadLine();
			CustomTrackDifficultyInformation customTrackDifficultyInformation = default(CustomTrackDifficultyInformation);
			customTrackDifficultyInformation.DifficultyLabel = "???";
			customTrackDifficultyInformation.Difficulty = Difficulty.Impossible;
			customTrackMetadata.AudioFileName = streamReader.ReadLine();
			customTrackDifficultyInformation.BeatmapFileName = streamReader.ReadLine();
			customTrackDifficultyInformation.Intensity = 999f;
			customTrackMetadata.DifficultyInformation = new CustomTrackDifficultyInformation[1];
			customTrackMetadata.DifficultyInformation[0] = customTrackDifficultyInformation;
			RRCustomTrackScenePayload rrcustomTrackScenePayload = new RRCustomTrackScenePayload();
			rrcustomTrackScenePayload.SetDestinationScene("RhythmRift");
			rrcustomTrackScenePayload.InitializeFromMetadata(customTrackMetadata, Difficulty.Impossible);
			rrcustomTrackScenePayload.IsPracticeMode = false;
			rrcustomTrackScenePayload.ShouldPracticeModeLoop = false;
			SceneLoadData.SetCurrentScenePayload(rrcustomTrackScenePayload);
			SceneLoadData.SetReturnScenePayload(this.CreateReturnScenePayload(customTrackMetadata.LevelId));
			SceneLoadData.StageEntryType = RiftAnalyticsService.StageEntryType.StageSelectMenu;
			SceneLoadingController.Instance.GoToScene("RhythmRift", null, true);
		}

		// Token: 0x060020B1 RID: 8369
		private void OnGUI()
		{
			Cursor.visible = true;
			string[] directories = Directory.GetDirectories(Application.persistentDataPath + "/CustomTracks/");
			this.custom_scroll_pos = GUI.BeginScrollView(new Rect((float)(Screen.width - 256), 0f, 256f, (float)Screen.height), this.custom_scroll_pos, new Rect(0f, 0f, 256f, (float)(directories.Length * 32 + 32)));
			for (int i = 0; i < directories.Length; i++)
			{
				string d_name = new DirectoryInfo(directories[i]).Name;
				if (GUI.Button(new Rect(0f, (float)(32 * i), 256f, 32f), d_name))
				{
					this.load_custom(d_name);
				}
			}
			GUI.EndScrollView();
		}

		// Token: 0x04000B5A RID: 2906
		private RiftInputActions _input;

		// Token: 0x04000B5B RID: 2907
		[Header("UI Object References")]
		[SerializeField]
		private Canvas _mainCanvas;

		// Token: 0x04000B5C RID: 2908
		[SerializeField]
		private GameObject _backgroundParent;

		// Token: 0x04000B5D RID: 2909
		[SerializeField]
		private GameObject _contentParent;

		// Token: 0x04000B5E RID: 2910
		[SerializeField]
		private GameObject _titleScreenObject;

		// Token: 0x04000B5F RID: 2911
		[SerializeField]
		private Animator _titleScreenAnimator;

		// Token: 0x04000B60 RID: 2912
		[SerializeField]
		private GameObject _navBarObject;

		// Token: 0x04000B61 RID: 2913
		[SerializeField]
		private OptionsScreenInputController _inputController;

		// Token: 0x04000B62 RID: 2914
		[SerializeField]
		private MainMenuNavOption[] _menuOptions;

		// Token: 0x04000B63 RID: 2915
		[Header("Specific Buttons for functionality")]
		[SerializeField]
		private MainMenuNavOption _collectionsMenuOption;

		// Token: 0x04000B64 RID: 2916
		[SerializeField]
		private MainMenuNavOption _extrasOption;

		// Token: 0x04000B65 RID: 2917
		[SerializeField]
		private MainMenuNavOption _settingsOption;

		// Token: 0x04000B66 RID: 2918
		[SerializeField]
		private MainMenuNavOption _quitOption;

		// Token: 0x04000B67 RID: 2919
		[SerializeField]
		private TextButtonOption _discordOption;

		// Token: 0x04000B68 RID: 2920
		[SerializeField]
		private TextButtonOption _newsletterOption;

		// Token: 0x04000B69 RID: 2921
		[SerializeField]
		private TextButtonOption _wishlistOption;

		// Token: 0x04000B6A RID: 2922
		[Header("Carousel Settings")]
		[SerializeField]
		private TextButtonOption _carouselOption;

		// Token: 0x04000B6B RID: 2923
		[SerializeField]
		private CarouselDisplay _carouselDisplay;

		// Token: 0x04000B6C RID: 2924
		[SerializeField]
		private TMP_Text _carouselCaptionText;

		// Token: 0x04000B6D RID: 2925
		[SerializeField]
		private string[] _carouselUrls;

		// Token: 0x04000B6E RID: 2926
		[RiftDropdownList("GetAllLocalizationKeysForDropdown", typeof(RiftLanguageTools))]
		[SerializeField]
		private string[] _carouselLocIds;

		// Token: 0x04000B6F RID: 2927
		[Header("Other Object References")]
		[SerializeField]
		private ExtrasMenuManager _extrasMenu;

		// Token: 0x04000B70 RID: 2928
		[SerializeField]
		private BeatMusicPlayer _beatMusicPlayer;

		// Token: 0x04000B71 RID: 2929
		[SerializeField]
		private RiftFXConfig _riftFXConfig;

		// Token: 0x04000B72 RID: 2930
		[SerializeField]
		private AssetReferenceCollectionsMenu _collectionsMenuAssetRef;

		// Token: 0x04000B73 RID: 2931
		[Header("Music/SFX")]
		[SerializeField]
		private EventReference MainThemeEventRef;

		// Token: 0x04000B74 RID: 2932
		[SerializeField]
		private int MainThemeBPM = 118;

		// Token: 0x04000B75 RID: 2933
		[SerializeField]
		private EventReference EnterMenuSFXEventRef;

		// Token: 0x04000B76 RID: 2934
		[SerializeField]
		private EventReference ConfirmSFXEventRef;

		// Token: 0x04000B77 RID: 2935
		[SerializeField]
		private EventReference MenuThemeEventRef;

		// Token: 0x04000B78 RID: 2936
		[SerializeField]
		private int MenuThemeBPM = 106;

		// Token: 0x04000B79 RID: 2937
		[SerializeField]
		private EventReference _unlockLevelsSFXEventRef;

		// Token: 0x04000B7A RID: 2938
		[SerializeField]
		private EventReference _demoWelcomeDismissEventRef;

		// Token: 0x04000B7B RID: 2939
		[Header("Debug")]
		[SerializeField]
		private TitleNavItemDefinition _devMenuNavItem;

		// Token: 0x04000B7C RID: 2940
		[SerializeField]
		private TitleNavItemDefinition _customTracksNavItem;

		// Token: 0x04000B7D RID: 2941
		[Header("Playtest Messages")]
		[SerializeField]
		private GameObject _playtestMessagesObject;

		// Token: 0x04000B7E RID: 2942
		[SerializeField]
		private GameObject _noStreamingDisclaimerMessageObject;

		// Token: 0x04000B7F RID: 2943
		[SerializeField]
		private GameObject _feedbackMessageObject;

		// Token: 0x04000B80 RID: 2944
		[SerializeField]
		private TMP_Text _agreeTextBox;

		// Token: 0x04000B81 RID: 2945
		[SerializeField]
		private GameObject _tryAgainText;

		// Token: 0x04000B82 RID: 2946
		[SerializeField]
		private Animation _wrongTextAnimation;

		// Token: 0x04000B83 RID: 2947
		[SerializeField]
		private Image _enterIcon;

		// Token: 0x04000B84 RID: 2948
		[SerializeField]
		private Color _unsubmittableEnterIconColor;

		// Token: 0x04000B85 RID: 2949
		[SerializeField]
		private Color _submittableEnterIconColor;

		// Token: 0x04000B86 RID: 2950
		[SerializeField]
		private float _minTimeBetweenDeleteInputs = 0.5f;

		// Token: 0x04000B87 RID: 2951
		[SerializeField]
		private int _maxAgreeTextLength = 15;

		// Token: 0x04000B88 RID: 2952
		private SettingsMenuManager _settingsMenu;

		// Token: 0x04000B89 RID: 2953
		private CollectionsMenuManager _collectionsMenu;

		// Token: 0x04000B8A RID: 2954
		private static bool _isFirstLoad = true;

		// Token: 0x04000B8B RID: 2955
		private const string TITLE_INTRO_TRIGGER = "PlayIntroFirstTime";

		// Token: 0x04000B8C RID: 2956
		private const string DEFAULT_LOOP_TRIGGER = "Default";

		// Token: 0x04000B8D RID: 2957
		private bool _wasAnyInputGivenThisFrame;

		// Token: 0x04000B8E RID: 2958
		private IDisposable _anyInputEventListener;

		// Token: 0x04000B8F RID: 2959
		private bool _isLoadingScene;

		// Token: 0x04000B90 RID: 2960
		private bool _shouldEnableInputNextFrame;

		// Token: 0x04000B91 RID: 2961
		private float _lastDeleteInputTime;

		// Token: 0x04000B92 RID: 2962
		private int _currentCarouselIndex;

		// Token: 0x04000B93 RID: 2963
		private readonly Dictionary<string, SceneLoadData.LoadedPayloadAssetData> _scenePayloadAssetDataByAssetGuid = new Dictionary<string, SceneLoadData.LoadedPayloadAssetData>();

		// Token: 0x040026E8 RID: 9960
		public Vector2 custom_scroll_pos;
	}
}

















using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using FMODUnity;
using RhythmRift.Traps;
using Shared;
using Shared.Analytics;
using Shared.Audio;
using Shared.Calibration;
using Shared.FX;
using Shared.Pins;
using Shared.PlayerData;
using Shared.RhythmEngine;
using Shared.RhythmEngine.Experimental;
using Shared.SceneLoading;
using Shared.SceneLoading.Payloads;
using Shared.TrackSelection;
using Sirenix.Utilities;
using TicToc.Localization;
using TicToc.ObjectPooling.Runtime;
using TMPro;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.Video;

namespace RhythmRift
{
	// Token: 0x02000428 RID: 1064
	public partial class RRStageController : StageController<RRBeatmapPlayer>
	{
		// Token: 0x06001971 RID: 6513 RVA: 0x00083B10 File Offset: 0x00081D10
		protected override void UnpackScenePayload(ScenePayload currentScenePayload)
		{
			this._stageScenePayload = (currentScenePayload as StageScenePayload);
			if (this._stageScenePayload == null)
			{
				Debug.LogError("Scene payload is not a StageScenePayload");
				return;
			}
			this._musicEventRef = this._stageScenePayload.GetMusicEventReference();
			this._shouldShowCountdown = this._stageScenePayload.GetShouldShowCountdown();
			this._numBeatsToDelayCountdown = this._stageScenePayload.GetNumBeatsToDelayCountdown();
			this._isTutorial = this._stageScenePayload.GetIsTutorial();
			this._shouldShowResultsScreen = this._stageScenePayload.GetShouldShowResultsScreen();
			bool flag = false;
			RRCustomTrackScenePayload rrcustomTrackScenePayload = currentScenePayload as RRCustomTrackScenePayload;
			if (rrcustomTrackScenePayload == null)
			{
				RhythmRiftScenePayload rhythmRiftScenePayload = currentScenePayload as RhythmRiftScenePayload;
				if (rhythmRiftScenePayload == null)
				{
					Debug.LogError(string.Format("Scene payload data does not match active scene! {0}", currentScenePayload.GetType()));
				}
				else
				{
					StageBeatmapData[] stageBeatmapDatas = rhythmRiftScenePayload.GetStageBeatmapDatas();
					string[] beatmapFiles = rhythmRiftScenePayload.GetBeatmapFiles();
					if (this._stageScenePayload.ShouldProcGen)
					{
						this._wasSeedProvided = !string.IsNullOrEmpty(this._stageScenePayload.ProcGenSeed);
						if (this._wasSeedProvided)
						{
							this._procGenSeedText = this._stageScenePayload.ProcGenSeed;
						}
						else
						{
							this._procGenSeedText = string.Empty;
							for (int i = 0; i < 8; i++)
							{
								int num = UnityEngine.Random.Range(0, this._possibleSeedCharacters.Length);
								this._procGenSeedText += this._possibleSeedCharacters[num].ToString();
							}
						}
						this._procGenCalculatedSeedValue = StageController<RRBeatmapPlayer>.ConvertSeedStringToInt(this._procGenSeedText);
					}
					else if (this._stageFlowUiController)
					{
						this._procGenSeedText = string.Empty;
						this._procGenCalculatedSeedValue = 0;
						this._stageFlowUiController.SetProcGenSeed(string.Empty);
					}
					if (beatmapFiles != null)
					{
						base.LoadBeatmapFiles(beatmapFiles);
					}
					if (flag)
					{
						this.ConsolidateBeatmaps();
					}
					this._isCalibrationTest = rhythmRiftScenePayload.IsCalibrationTest;
					this._isFTUE = rhythmRiftScenePayload.IsFTUE;
					this._requiredSuccessfulInputsPerBeatmap = (from d in stageBeatmapDatas
					select d.RequiredSuccessfulInputsToProceed).ToArray<int>();
					this._shouldRequireSequentialSuccessesPerBeatmap = (from d in stageBeatmapDatas
					select d.ShouldRequireSequentialSuccesses).ToArray<bool>();
					this._heroPortraitCharacterId = rhythmRiftScenePayload.HeroPortraitCharacterId;
					this._counterpartPortraitCharacterId = ((rhythmRiftScenePayload.IsPracticeMode || this._isCalibrationTest) ? this.BeastmasterPortraitCharacterId : rhythmRiftScenePayload.CounterpartPortraitCharacterId);
					flag = rhythmRiftScenePayload.ShouldConsolidateBeatmaps;
					if (!rhythmRiftScenePayload.GetLevelId().IsNullOrWhitespace())
					{
						this._levelId = rhythmRiftScenePayload.GetLevelId();
					}
					if (!this._isTutorial)
					{
						this._hasStageEverBeenCompletedBefore = (PlayerDataUtil.GetHighestCompletedDifficulty(this._levelId, false) > Difficulty.None);
					}
					this._finalInputBeatNumberOverride = rhythmRiftScenePayload.FinalInputBeatOverride;
					SongDatabaseData? songDatabaseData;
					SongDatabase.Instance.TryGetEntryForLevelId(this._levelId, out songDatabaseData);
					if (songDatabaseData != null)
					{
						this._trackNameLocKey = songDatabaseData.Value.TrackNameLocKey;
						this._artistNameLocKey = songDatabaseData.Value.ArtistNameLocKey;
						if (this._trackNameText)
						{
							this._trackNameText.text = Localizer.GetText(this._trackNameLocKey, null);
						}
						if (this._artistNameText)
						{
							this._artistNameText.text = Localizer.GetFormattedText("RhythmRift_TrackArtistCredit", new object[]
							{
								Localizer.GetText(this._artistNameLocKey, null)
							});
						}
						Difficulty levelDifficulty = rhythmRiftScenePayload.GetLevelDifficulty();
						if (this._stageUIView)
						{
							this._stageUIView.SetDifficulty(levelDifficulty);
						}
						if (!string.IsNullOrWhiteSpace(this._levelId))
						{
							this._finalInputBeatNumberOverride = songDatabaseData.Value.GetFinalInputBeatFromDifficulty(rhythmRiftScenePayload.GetLevelDifficulty());
						}
					}
					else
					{
						if (this._trackNameText)
						{
							this._trackNameText.text = rhythmRiftScenePayload.TrackName;
						}
						if (this._artistNameText)
						{
							this._artistNameText.text = Localizer.GetFormattedText("RhythmRift_TrackArtistCredit", new object[]
							{
								rhythmRiftScenePayload.ArtistName
							});
						}
						Difficulty levelDifficulty2 = rhythmRiftScenePayload.GetLevelDifficulty();
						if (this._stageUIView)
						{
							this._stageUIView.SetDifficulty(levelDifficulty2);
						}
					}
					this._winUiDelayInBeats = rhythmRiftScenePayload.SongFadeOutDurationInBeats;
					this._isDoubleSpeed = rhythmRiftScenePayload.IsDoubleSpeed;
					this._isShopkeeperActive = string.Equals(this._counterpartPortraitCharacterId, this.ShopkeeperPortraitCharacterId);
					if (this._riftFXConfig)
					{
						this._riftFXConfig.TEMP_ShouldShowSpecialBGFx = rhythmRiftScenePayload.ShouldShowSpecialBGTEMP;
					}
					this._isPracticeMode = (rhythmRiftScenePayload.IsPracticeMode && !this._isTutorial);
					this._shouldPracticeModeLoop = (rhythmRiftScenePayload.ShouldPracticeModeLoop && this._isPracticeMode && !this._isTutorial);
					this._shouldShowEarlyLateHits = (PlayerSaveController.Instance.CurrentSaveData.ShouldShowEarlyLateHits || this._isPracticeMode || (this._isCalibrationTest && !this._isFTUE));
					this._shouldShowAccuracyBar = ((PlayerSaveController.Instance.CurrentSaveData.ShouldShowAccuracyBar || this._isPracticeMode) && !this._isCalibrationTest);
					this._shouldHideGuitarStrings = PlayerSaveController.Instance.CurrentSaveData.ShouldDisableGuitarStrings;
					this._shouldShowReducedComboScoreVFX = PlayerSaveController.Instance.CurrentSaveData.ShouldShowReducedComboScoreVFX;
					this._shouldShowSimpleBackground = PlayerSaveController.Instance.CurrentSaveData.ShouldShowSimpleBackground;
					if (this._isPracticeMode)
					{
						this._practiceModeTextObject.SetActive(this._isPracticeMode);
						if (songDatabaseData != null)
						{
							this._practiceModeTotalStageBeats = songDatabaseData.Value.GetBeatCountFromDifficulty(rhythmRiftScenePayload.GetLevelDifficulty());
						}
						else
						{
							this._practiceModeTotalStageBeats = rhythmRiftScenePayload.TotalBeats;
						}
						bool flag2 = false;
						float practiceModeStartBeat = rhythmRiftScenePayload.PracticeModeStartBeat;
						float practiceModeEndBeat = rhythmRiftScenePayload.PracticeModeEndBeat;
						if (practiceModeStartBeat - 8f < 0f)
						{
							this._practiceModeStartBeatNumber = 0f;
							flag2 = true;
						}
						else if (practiceModeStartBeat - 8f > this._practiceModeTotalStageBeats - 1f)
						{
							this._practiceModeTotalStageBeats = this._practiceModeTotalStageBeats - 8f - 1f;
							flag2 = true;
						}
						else
						{
							this._practiceModeStartBeatNumber = practiceModeStartBeat - 8f;
						}
						if (practiceModeEndBeat <= 0f || practiceModeEndBeat > this._practiceModeTotalStageBeats)
						{
							this._practiceModeEndBeatNumber = this._practiceModeTotalStageBeats;
							flag2 = true;
						}
						else if (practiceModeEndBeat <= this._practiceModeStartBeatNumber)
						{
							this._practiceModeEndBeatNumber = this._practiceModeStartBeatNumber + 1f;
							flag2 = true;
						}
						else
						{
							this._practiceModeEndBeatNumber = practiceModeEndBeat;
						}
						if (flag2)
						{
							rhythmRiftScenePayload.SetPracticeModeBeatRange(this._practiceModeStartBeatNumber, this._practiceModeEndBeatNumber);
						}
						float num2 = this._practiceModeStartBeatNumber;
						this._practiceModeStartBeatmapIndex = 0;
						this._practiceModeTotalBeatsSkippedBeforeStartBeatmap = 0f;
						for (int k = 0; k < this._beatmaps.Count; k++)
						{
							if (this._beatmaps[k].DurationInBeats > num2)
							{
								this._practiceModeStartBeatmapIndex = k;
								break;
							}
							num2 -= this._beatmaps[k].DurationInBeats;
							this._practiceModeTotalBeatsSkippedBeforeStartBeatmap += this._beatmaps[k].DurationInBeats;
						}
						this._beatmapsIndex = this._practiceModeStartBeatmapIndex;
						this._enemyController.SetStartBeatOffset(this._practiceModeStartBeatNumber);
						this._debugBeatmapIndex = 0;
						this._debugBeatmapPercentageStart = 0f;
						this._debugBeatmapStartTime = 0f;
						this._debugBeatToStartOn = 0f;
					}

					this._shouldTutorialBeatmapsStartOnBeatOne = this._isCalibrationTest;
					if (this._isTutorial)
					{
						this._stageUIView.ToggleComboUIForTutorial(false);
						this._tutorialMaxVibePowerPerBeatmap = new int[stageBeatmapDatas.Length];
						for (int j = 0; j < stageBeatmapDatas.Length; j++)
						{
							if (stageBeatmapDatas[j].ShouldHaveVibePowerActiveInTutorial)
							{
								this._tutorialMaxVibePowerPerBeatmap[j] = stageBeatmapDatas[j].TutorialMaxVibePower;
							}
							else
							{
								this._tutorialMaxVibePowerPerBeatmap[j] = 0;
							}
						}
					}
					else
					{
						this._stageUIView.ToggleComboUIForTutorial(true);
					}
					if (this._isCalibrationTest && this._calibrationTestLabel)
					{
						this._calibrationTestLabel.SetActive(true);
					}
					
					this._isMicroRift = rhythmRiftScenePayload.IsMicroRift;
					this._shouldPlayCountdownSfx = (this._isMicroRift || (this._isPracticeMode && this._practiceModeStartBeatNumber > 0f));
					this._microRiftStartBeatmapIndex = rhythmRiftScenePayload.MicroRiftStartBeatmapIndex;
					this._microRiftStartBeatNumber = rhythmRiftScenePayload.MicroRiftStartBeat;
					this._microRiftEndBeatNumber = rhythmRiftScenePayload.MicroRiftEndBeat;
					this._microRiftExpectedFinalInputBeatNumber = rhythmRiftScenePayload.MicroRiftExpectedFinalBeat;
					this._microRiftModifierOverrides = rhythmRiftScenePayload.MicroRiftModifierOverrides;
					if (this._isMicroRift)
					{
						this._microRiftTotalBeatsSkippedBeforeStartBeatmap = 0f;
						for (int l = 0; l < this._microRiftStartBeatmapIndex; l++)
						{
							if (l < this._beatmaps.Count)
							{
								this._microRiftTotalBeatsSkippedBeforeStartBeatmap += this._beatmaps[l].DurationInBeats;
							}
						}
						this._enemyController.SetStartBeatOffset(this._microRiftStartBeatNumber);
						this._beatmapsIndex = this._microRiftStartBeatmapIndex;
						this._debugBeatmapIndex = 0;
						this._debugBeatmapPercentageStart = 0f;
						this._debugBeatmapStartTime = 0f;
						this._debugBeatToStartOn = 0f;
						if (!this._microRiftEndSustainEventRef.IsNull)
						{
							this._microRiftSustainAudioInstance = AudioManager.Instance.PlayAudioEvent(this._microRiftEndSustainEventRef, 0f, false, 0U, 0f, true);
							this._ongoingSfx.Add(this._microRiftSustainAudioInstance);
						}
					}
					if (rhythmRiftScenePayload.IsStoryMode)
					{
						this._introDialogueId = rhythmRiftScenePayload.IntroDialogueID;
						this._outroDialogueId = rhythmRiftScenePayload.OutroDialogueID;
					}
					if (PinsController.IsPinActive("Nightmare"))
					{
						if (rhythmRiftScenePayload.HasNightmarePinRNGSeed)
						{
							this._nightmareRandomGenerator = new System.Random(rhythmRiftScenePayload.NightmarePinRNGSeed);
							Debug.Log("Seed initialized! Seed: " + rhythmRiftScenePayload.NightmarePinRNGSeed.ToString());
						}
						else
						{
							int num3 = UnityEngine.Random.Range(int.MinValue, int.MaxValue);
							rhythmRiftScenePayload.SetNightmareRNGSeed(num3);
							this._nightmareRandomGenerator = new System.Random(num3);
							Debug.Log("Seed not initialized! Setting Seed: " + num3.ToString());
						}
					}
				}
			}
			else
			{
				string str = Application.persistentDataPath + Path.DirectorySeparatorChar.ToString() + "CustomTracks" + Path.DirectorySeparatorChar.ToString();
				string audioFileName = rrcustomTrackScenePayload.GetAudioFileName();
				string customTrackAudioFilePath = str + audioFileName;
				Difficulty levelDifficulty3 = rrcustomTrackScenePayload.GetLevelDifficulty();
				string beatmapFileName = rrcustomTrackScenePayload.GetBeatmapFileName();
				string path = str + beatmapFileName;
				if (!File.Exists(path))
				{
					Debug.LogError("Couldn't find mod beatmap file " + beatmapFileName);
					return;
				}
				this._customTrackAudioFilePath = customTrackAudioFilePath;
				string text = File.ReadAllText(path);
				Debug.Log(text);
				base.LoadAndAdjustBeatmapFromJsonString(text, beatmapFileName);
				this._requiredSuccessfulInputsPerBeatmap = new int[1];
				this._shouldRequireSequentialSuccessesPerBeatmap = new bool[1];
				this._heroPortraitCharacterId = rrcustomTrackScenePayload.HeroPortraitCharacterId;
				this._counterpartPortraitCharacterId = rrcustomTrackScenePayload.CounterpartPortraitCharacterId;
				if (this._trackNameText)
				{
					this._trackNameText.text = rrcustomTrackScenePayload.TrackName;
				}
				if (this._artistNameText)
				{
					this._artistNameText.text = Localizer.GetFormattedText("RhythmRift_TrackArtistCredit", new object[]
					{
						rrcustomTrackScenePayload.ArtistName
					});
				}
				if (this._stageUIView)
				{
					this._stageUIView.SetDifficulty(levelDifficulty3);
				}

				this._isPracticeMode = (rrcustomTrackScenePayload.IsPracticeMode && !this._isTutorial);
					this._shouldPracticeModeLoop = (rrcustomTrackScenePayload.ShouldPracticeModeLoop && this._isPracticeMode && !this._isTutorial);
					this._shouldShowEarlyLateHits = (PlayerSaveController.Instance.CurrentSaveData.ShouldShowEarlyLateHits || this._isPracticeMode || (this._isCalibrationTest && !this._isFTUE));
					this._shouldShowAccuracyBar = ((PlayerSaveController.Instance.CurrentSaveData.ShouldShowAccuracyBar || this._isPracticeMode) && !this._isCalibrationTest);
					this._shouldHideGuitarStrings = PlayerSaveController.Instance.CurrentSaveData.ShouldDisableGuitarStrings;
					this._shouldShowReducedComboScoreVFX = PlayerSaveController.Instance.CurrentSaveData.ShouldShowReducedComboScoreVFX;
					this._shouldShowSimpleBackground = PlayerSaveController.Instance.CurrentSaveData.ShouldShowSimpleBackground;
					if (this._isPracticeMode)
					{
						this._practiceModeTextObject.SetActive(this._isPracticeMode);
						this._practiceModeTotalStageBeats = rrcustomTrackScenePayload.TotalBeats;
						bool flag2 = false;
						float practiceModeStartBeat = rrcustomTrackScenePayload.PracticeModeStartBeat;
						float practiceModeEndBeat = rrcustomTrackScenePayload.PracticeModeEndBeat;
						if (practiceModeStartBeat - 8f < 0f)
						{
							this._practiceModeStartBeatNumber = 0f;
							flag2 = true;
						}
						else if (practiceModeStartBeat - 8f > this._practiceModeTotalStageBeats - 1f)
						{
							this._practiceModeTotalStageBeats = this._practiceModeTotalStageBeats - 8f - 1f;
							flag2 = true;
						}
						else
						{
							this._practiceModeStartBeatNumber = practiceModeStartBeat - 8f;
						}
						if (practiceModeEndBeat <= 0f || practiceModeEndBeat > this._practiceModeTotalStageBeats)
						{
							this._practiceModeEndBeatNumber = this._practiceModeTotalStageBeats;
							flag2 = true;
						}
						else if (practiceModeEndBeat <= this._practiceModeStartBeatNumber)
						{
							this._practiceModeEndBeatNumber = this._practiceModeStartBeatNumber + 1f;
							flag2 = true;
						}
						else
						{
							this._practiceModeEndBeatNumber = practiceModeEndBeat;
						}
						if (flag2)
						{
							rrcustomTrackScenePayload.SetPracticeModeBeatRange(this._practiceModeStartBeatNumber, this._practiceModeEndBeatNumber);
						}
						float num2 = this._practiceModeStartBeatNumber;
						this._practiceModeStartBeatmapIndex = 0;
						this._practiceModeTotalBeatsSkippedBeforeStartBeatmap = 0f;
						for (int k = 0; k < this._beatmaps.Count; k++)
						{
							if (this._beatmaps[k].DurationInBeats > num2)
							{
								this._practiceModeStartBeatmapIndex = k;
								break;
							}
							num2 -= this._beatmaps[k].DurationInBeats;
							this._practiceModeTotalBeatsSkippedBeforeStartBeatmap += this._beatmaps[k].DurationInBeats;
						}
						this._beatmapsIndex = this._practiceModeStartBeatmapIndex;
						this._enemyController.SetStartBeatOffset(this._practiceModeStartBeatNumber);
						this._debugBeatmapIndex = 0;
						this._debugBeatmapPercentageStart = 0f;
						this._debugBeatmapStartTime = 0f;
						this._debugBeatToStartOn = 0f;
					}
			}

			

			if (base.IsUsingPayloadOverride && !this._isMicroRift && this._debugBeatmapStartTime > 0f)
			{
				float num4 = 0f;
				for (int m = 0; m < this._debugBeatmapIndex; m++)
				{
					num4 += this._beatmaps[m].DurationInBeats;
				}
				this._enemyController.SetStartBeatOffset(num4 + this._debugBeatToStartOn);
			}
			if (this._stageUIView)
			{
				if (this._isTutorial || this._isCalibrationTest)
				{
					this._stageUIView.SetBeatmapProgressBarDisplayStatus(false);
				}
				else
				{
					this._stageUIView.SetBeatmapProgressBarDisplayStatus(true);
				}
				this._stageUIView.SetBeatmapProgressBarTrueBeatNumberStatus(true);
				this._stageUIView.SetCalibrationTest(this._isCalibrationTest);
				if (this._isPracticeMode)
				{
					this._stageUIView.SetPracticeModeTextStatus(true);
				}
				this._stageUIView.ToggleReducedVFX(this._shouldShowReducedComboScoreVFX);
				this._stageUIView.ToggleSimpleBackground(this._shouldShowSimpleBackground);
			}
			if (this._accuracyBar)
			{
				this._accuracyBar.Initialize(this._totalInputsToShowInAccuracyBar, base.BeatmapPlayer.ActiveInputRatingsDefinition);
			}
			ScenePayload scenePayload;
			if (SceneLoadData.TryGetReturnPayload(out scenePayload))
			{
				ArcadeModeScenePayload arcadeModeScenePayload = scenePayload as ArcadeModeScenePayload;
				if (arcadeModeScenePayload != null)
				{
					this._isArcadeMode = true;
					this._arcadeModePlayerHealth = arcadeModeScenePayload.CurrentPlayerHealth;
					this._arcadeModeIsOnRetry = arcadeModeScenePayload.HasRetriedThisStage;
					return;
				}
				this._isArcadeMode = false;
			}
		}
	}
}
